# EcoTale Project Structure Documentation

## 1. Frontend Structure
```
src/components/pages/
├── CalculateCostSavingsPage.tsx
├── CalculateImpactPage.tsx
├── EducationPage.tsx
├── ProductDetailsPage.tsx
├── ProductsOverviewPage.tsx
├── PurchasePage.tsx
└── TechnologyPage.tsx
```

## 2. Component Examples

### Button Component (src/components/common/Button.tsx)
```typescript
interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  className?: string;
}

export const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  disabled = false,
  type = 'button',
  className = ''
}) => {
  // Component implementation
}
```

## 3. State Management

### Type Definitions (src/types/store.ts)
```typescript
export interface AuthState {
  user: User | null;
  isLoading: boolean;
  error: Error | null;
  signIn: () => Promise<void>;
  signOut: () => Promise<void>;
  setUser: (user: User | null) => void;
}

export interface UIState {
  theme: 'light' | 'dark';
  isSidebarOpen: boolean;
  notifications: Notification[];
}
```

## 4. Main Routes Structure
```
/                       // Home
├── /ai-innovations    // AI Innovations page
├── /clean            // Clean technology page
├── /labs             // Self Labs page
├── /education        // Education portal
├── /products           
│   ├── /v1          // Product V1 details
│   ├── /v2          // Product V2 details
│   └── /v3          // Product V3 details
├── /purchase         // Purchase flow
├── /calculate-impact // Environmental impact calculator
├── /calculate-savings// Cost savings calculator
├── /technology      // Technology overview
└── /contact         // Contact page
```

## 5. Section Components
```
src/components/sections/
├── BlogSection.tsx
├── ContentSection.tsx
├── CostSavingsSection.tsx
├── EnvironmentalImpactSection.tsx
├── FAQSection.tsx
├── HowItWorksSection.tsx
├── HowSavingsSection.tsx
├── HowToUseSection.tsx
├── ProductSection.tsx
├── SmartWasteSection.tsx
├── TestimonialsSection.tsx
└── ValueProposition.tsx
```

## 6. Styling Implementation (tailwind.config.js)
```javascript
module.exports = {
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#E3F2FD',
          // ... color scale
          900: '#0D47A1',
        }
      },
      keyframes: {
        'fade-in-right': {
          '0%': { opacity: '0', transform: 'translateX(100px)' },
          '100%': { opacity: '1', transform: 'translateX(0)' }
        }
      }
    }
  }
}
```

## 7. Common Components
```
src/components/common/
├── Button.tsx           // Reusable button component
├── StickyProductCard.tsx// Floating product card
└── TestimonialCard.tsx  // Testimonial display component
```

## 8. Technology Stack

### Frontend
- React ^18.x with TypeScript ^4.x
- Functional components with hooks
- Tailwind CSS ^3.x for styling
- React Router v6 for navigation
- Zustand ^4.x for state management

### Backend Integration
- Firebase services:
  - Firestore for database
  - Firebase Authentication
  - Firebase Hosting
  - Firebase Cloud Functions (optional)

### Development Tools
- Node.js ^16.x
- TypeScript ^4.x
- ESLint ^8.x for code linting
- Prettier ^2.x for code formatting
- Jest ^29.x for testing
- Vite ^4.x for development and building

## 9. Best Practices
- Mobile-first responsive design
- Accessibility considerations (ARIA roles)
- Performance optimizations
- Component reusability
- Type safety with TypeScript
- Clear separation of concerns
- Consistent naming conventions:
  - PascalCase for components
  - camelCase for functions and variables
  - kebab-case for files

## 10. Environment Configuration
- Environment variables through .env files
- Separate configurations for development and production
- Secure handling of API keys and sensitive data

Example `.env` structure:
```env
# Firebase Configuration
FIREBASE_API_KEY=your_api_key
FIREBASE_AUTH_DOMAIN=your_auth_domain
FIREBASE_PROJECT_ID=your_project_id
FIREBASE_STORAGE_BUCKET=your_storage_bucket
FIREBASE_MESSAGING_SENDER_ID=your_sender_id
FIREBASE_APP_ID=your_app_id

# API Configuration
API_URL=your_api_url
API_VERSION=v1

# Feature Flags
ENABLE_ANALYTICS=true
ENABLE_NOTIFICATIONS=true
```

## 11. Project Organization
```
src/
├── components/
│   ├── common/          # Reusable components
│   ├── layout/          # Layout components
│   ├── pages/           # Page components
│   └── sections/        # Section components
├── contexts/            # React contexts
├── services/            # API and service integrations
└── types/              # TypeScript type definitions
```

## 12. Type Definitions Example
```typescript
interface ProductFeature {
  icon: string;
  title: string;
  description: string;
}

interface TechnicalSpec {
  category: string;
  details: string[];
}

interface ProductVersion {
  id: string;
  name: string;
  tagline: string;
  description: string;
  price: string;
  features: ProductFeature[];
  technicalSpecs: TechnicalSpec[];
  metrics: string[];
  imageUrl: string;
}
```

## 13. Navigation Implementation Example
```typescript
export const ProductSection: React.FC = () => {
  const navigate = useNavigate();

  return (
    <button 
      onClick={() => navigate('/purchase')}
      className="..."
    >
      Buy Now
    </button>
  );
};
```

## 14. Testing Requirements
- Jest ^29.x for unit testing
- Minimum 80% code coverage requirement
- Test files naming: *.test.ts(x) or *.spec.ts(x)

Jest configuration in package.json:
```json
{
  "jest": {
    "collectCoverage": true,
    "coverageThreshold": {
      "global": {
        "branches": 80,
        "functions": 80,
        "lines": 80,
        "statements": 80
      }
    },
    "coverageDirectory": "coverage",
    "testEnvironment": "jsdom",
    "setupFilesAfterEnv": [
      "<rootDir>/src/setupTests.ts"
    ],
    "moduleNameMapper": {
      "^@/(.*)$": "<rootDir>/src/$1"
    }
  }
}
```

## 15. Security Considerations
- Firebase Authentication implementation
  - Email/password authentication
  - Google OAuth integration
  - JWT token management
- Environment variable management
  - Use of .env files
  - Different configurations per environment
- API key security
  - Server-side API key storage
  - Client-side key restrictions
- Input sanitization
  - XSS prevention
  - SQL injection prevention
  - Input validation middleware
- HTTPS enforcement
  - Secure cookie attributes
  - CORS configuration
  - CSP headers

## 16. Performance Optimization
- Code splitting using React.lazy and Suspense
- Image optimization
  - WebP format
  - Lazy loading
  - Responsive images
- Bundle size optimization
  - Tree shaking
  - Dynamic imports
- Caching strategies
  - Service Worker implementation
  - Browser caching
- Performance monitoring
  - Lighthouse scores
  - Web Vitals tracking

## 17. Deployment Configuration
```
├── .github/
│   └── workflows/
│       ├── ci.yml        # CI pipeline
│       └── deploy.yml    # CD pipeline
├── firebase.json         # Firebase configuration
├── .firebaserc          # Firebase project settings
└── vite.config.ts       # Vite configuration
```

Example firebase.json:
```json
{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ],
    "headers": [
      {
        "source": "**/*.@(js|css)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "max-age=31536000"
          }
        ]
      }
    ]
  }
}
```

## 18. Dependencies
Key dependencies and their versions:
```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "zustand": "^4.3.0",
    "firebase": "^9.17.0",
    "tailwindcss": "^3.2.0",
    "@headlessui/react": "^1.7.0",
    "@heroicons/react": "^2.0.0"
  },
  "devDependencies": {
    "typescript": "^4.9.0",
    "@types/react": "^18.0.0",
    "@types/node": "^16.0.0",
    "vite": "^4.1.0",
    "jest": "^29.0.0",
    "@testing-library/react": "^13.0.0",
    "eslint": "^8.33.0",
    "prettier": "^2.8.0"
  }
}
```

This documentation provides a comprehensive overview of the EcoTale project structure and implementation details. It serves as a reference for developers working on the project and ensures consistency in development practices. 